import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from dotenv import load_dotenv
import os

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="Markdown"))
dp = Dispatcher()

# üìå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite
conn = sqlite3.connect("database.db")
cursor = conn.cursor()

# üìå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å, —è–∫—â–æ –≤–æ–Ω–∏ —â–µ –Ω–µ —ñ—Å–Ω—É—é—Ç—å
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    role TEXT
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS orders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    description TEXT,
    pickup_address TEXT,
    delivery_address TEXT,
    deadline TEXT,
    status TEXT DEFAULT '–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è',
    payment_status TEXT DEFAULT '–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ'
)
""")
conn.commit()

# üîπ FSM –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
class OrderForm(StatesGroup):
    waiting_for_description = State()
    waiting_for_pickup = State()
    waiting_for_delivery = State()
    waiting_for_deadline = State()

@dp.message(Command("start"))
async def start(message: types.Message):
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (message.from_user.id,))
    user = cursor.fetchone()

    if not user:
        cursor.execute("INSERT INTO users (user_id, username, role) VALUES (?, ?, ?)", 
                       (message.from_user.id, message.from_user.username or "–ù–µ–≤—ñ–¥–æ–º–∏–π", "user"))
        conn.commit()
        await message.answer("–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ! üéâ")
    else:
        await message.answer("–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ! ‚úÖ")

@dp.message(Command("admin"))
async def admin(message: types.Message):
    parts = message.text.split()
    if len(parts) != 2 or parts[1] != "1320":
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–æ–¥. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `/admin 1320`")
        return

    cursor.execute("UPDATE users SET role = 'admin' WHERE user_id = ?", (message.from_user.id,))
    conn.commit()
    await message.answer("‚úÖ –í–∏ —Å—Ç–∞–ª–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–∫—É—Ä'—î—Ä–æ–º)!")

@dp.message(Command("add_order"))
async def add_order(message: types.Message, state: FSMContext):
    cursor.execute("SELECT role FROM users WHERE user_id = ?", (message.from_user.id,))
    user_role = cursor.fetchone()

    if user_role and user_role[0] == "admin":
        await message.answer("‚ùå –ö—É—Ä'—î—Ä–∏ (–∞–¥–º—ñ–Ω–∏) –Ω–µ –º–æ–∂—É—Ç—å —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!")
        return

    await message.answer("üìù *–ù–∞–ø–∏—à—ñ—Ç—å –æ–ø–∏—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞:*")
    await state.set_state(OrderForm.waiting_for_description)

@dp.message(OrderForm.waiting_for_description)
async def process_order_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text.strip())
    await message.answer("üìç *–î–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–±—Ä–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç?* (–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É)")
    await state.set_state(OrderForm.waiting_for_pickup)

@dp.message(OrderForm.waiting_for_pickup)
async def process_order_pickup(message: types.Message, state: FSMContext):
    await state.update_data(pickup_address=message.text.strip())
    await message.answer("üìç *–ö—É–¥–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ—Å—Ç–∞–≤–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç?* (–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É)")
    await state.set_state(OrderForm.waiting_for_delivery)

@dp.message(OrderForm.waiting_for_delivery)
async def process_order_delivery(message: types.Message, state: FSMContext):
    await state.update_data(delivery_address=message.text.strip())
    await message.answer("‚è≥ *–í–∫–∞–∂—ñ—Ç—å –∫—Ä–∞–π–Ω—ñ–π —á–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (—Ñ–æ—Ä–º–∞—Ç: HH:MM –∞–±–æ '–±—É–¥—å-–∫–æ–ª–∏')*")
    await state.set_state(OrderForm.waiting_for_deadline)

@dp.message(OrderForm.waiting_for_deadline)
async def process_order_deadline(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    deadline = message.text.strip()

    cursor.execute("""
        INSERT INTO orders (user_id, description, pickup_address, delivery_address, deadline) 
        VALUES (?, ?, ?, ?, ?)""",
        (message.from_user.id, user_data["description"], user_data["pickup_address"], user_data["delivery_address"], deadline))
    conn.commit()

    await message.answer(
        f"‚úÖ *–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ!*\n"
        f"üìÑ *–û–ø–∏—Å:* {user_data['description']}\n"
        f"üìç *–ó–∞–±—Ä–∞—Ç–∏:* {user_data['pickup_address']}\n"
        f"üìç *–î–æ—Å—Ç–∞–≤–∏—Ç–∏:* {user_data['delivery_address']}\n"
        f"‚è≥ *–ö—Ä–∞–π–Ω—ñ–π —á–∞—Å:* {deadline}"
    )
    await state.clear()

@dp.message(Command("orders"))
async def orders(message: types.Message):
    cursor.execute("SELECT role FROM users WHERE user_id = ?", (message.from_user.id,))
    user_role = cursor.fetchone()

    if not user_role:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É. –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.")
        return

    if user_role[0] == "admin":
        cursor.execute("SELECT * FROM orders")
        orders = cursor.fetchall()
        response = "üìã *–í—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:*\n"
    else:
        cursor.execute("SELECT * FROM orders WHERE user_id = ?", (message.from_user.id,))
        orders = cursor.fetchall()
        response = "üìã *–í–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n"

    if orders:
        for order in orders:
            response += (
                f"üîπ *ID:* {order[0]}\n"
                f"   üìÑ *–û–ø–∏—Å:* {order[2]}\n"
                f"   üìç *–ó–∞–±—Ä–∞—Ç–∏:* {order[3]}\n"
                f"   üìç *–î–æ—Å—Ç–∞–≤–∏—Ç–∏:* {order[4]}\n"
                f"   ‚è≥ *–ö—Ä–∞–π–Ω—ñ–π —á–∞—Å:* {order[5]}\n"
                f"   üì¶ *–°—Ç–∞—Ç—É—Å:* {order[6]}\n"
                f"   üí≥ *–û–ø–ª–∞—Ç–∞:* {order[7]}\n\n"
            )
    else:
        response += "‚ÑπÔ∏è –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å."

    await message.answer(response)

async def main():
    await dp.start_polling(bot)

@dp.message(Command("update_order"))
async def update_order(message: types.Message):
    cursor.execute("SELECT role FROM users WHERE user_id = ?", (message.from_user.id,))
    user_role = cursor.fetchone()

    if not user_role or user_role[0] != "admin":
        await message.answer("‚ùå –õ–∏—à–µ –∫—É—Ä'—î—Ä –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!")
        return

    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.answer("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `/update_order <ID> <–Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å>`")
        return

    order_id, new_status = parts[1], parts[2]

    cursor.execute("SELECT * FROM orders WHERE id = ?", (order_id,))
    order = cursor.fetchone()

    if not order:
        await message.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return

    cursor.execute("UPDATE orders SET status = ? WHERE id = ?", (new_status, order_id))
    conn.commit()

    user_id = order[1]

    if new_status == "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ":
        cursor.execute("UPDATE orders SET payment_status = '–û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç—É' WHERE id = ?", (order_id,))
        conn.commit()

        pay_button = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—á–µ–Ω–æ", callback_data=f"pay_{order_id}")]
        ])

        await bot.send_message(
            user_id,
            f"üì¶ *–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!*\n"
            f"üí≥ *–°—É–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏:* 50 –≥—Ä–Ω\n"
            f"üí≥ *–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏:* `4441111146829944`\n"
            "–ü–µ—Ä–µ–∫–∞–∂—ñ—Ç—å –∫–æ—à—Ç–∏ –Ω–∞ —Ü—é –∫–∞—Ä—Ç—É —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–û–ø–ª–∞—á–µ–Ω–æ'.",
            reply_markup=pay_button
        )

    await message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ '{new_status}'")


@dp.callback_query(lambda query: query.data.startswith("pay_"))
async def confirm_payment_request(query: CallbackQuery):
    order_id = query.data.split("_")[1]

    cursor.execute("SELECT * FROM orders WHERE id = ?", (order_id,))
    order = cursor.fetchone()

    if not order:
        await query.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return

    admin = cursor.execute("SELECT user_id FROM users WHERE role = 'admin'").fetchone()
    if not admin:
        await query.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤!")
        return

    admin_id = admin[0]

    confirm_buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –¢–∞–∫", callback_data=f"confirm_{order_id}_yes"),
         InlineKeyboardButton(text="‚ùå –ù—ñ", callback_data=f"confirm_{order_id}_no")]
    ])

    await bot.send_message(
        admin_id,
        f"üí∞ *–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ '–û–ø–ª–∞—á–µ–Ω–æ' –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}.*\n"
        "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –∫–æ—à—Ç–∏ –Ω–∞–¥—ñ–π—à–ª–∏ –Ω–∞ –∫–∞—Ä—Ç—É.",
        reply_markup=confirm_buttons
    )

    await query.answer("–û—á—ñ–∫—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")


@dp.callback_query(lambda query: query.data.startswith("confirm_"))
async def process_admin_payment_confirmation(query: CallbackQuery):
    try:
        print(f"DEBUG: –û—Ç—Ä–∏–º–∞–Ω–æ callback - {query.data}")  # –õ–æ–≥ –¥–ª—è –¥–µ–±–∞–≥—É

        parts = query.data.split("_")

        if len(parts) < 3:  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –≤—Å—ñ —á–∞—Å—Ç–∏–Ω–∏
            print(f"‚ùå DEBUG: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç callback'–∞: {query.data}")
            await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–∞–Ω–∏—Ö.")
            return

        order_id = parts[1]
        decision = parts[2]

        cursor.execute("SELECT user_id FROM orders WHERE id = ?", (order_id,))
        order = cursor.fetchone()

        if not order:
            await query.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return

        user_id = order[0]  # –û–Ω–æ–≤–ª–µ–Ω–æ: –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –¥–ª—è user_id

        if decision == "yes":
            cursor.execute("UPDATE orders SET payment_status = '–û–ø–ª–∞—á–µ–Ω–æ' WHERE id = ?", (order_id,))
            conn.commit()

            await bot.send_message(user_id, f"‚úÖ *–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} —É—Å–ø—ñ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ!*")
            await query.message.edit_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!")

            await query.answer("–û–ø–ª–∞—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!")

        elif decision == "no":
            pay_button = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—á–µ–Ω–æ", callback_data=f"pay_{order_id}")]
            ])

            await bot.send_message(
                user_id,
                f"‚ö†Ô∏è *–í–∞—à –ø–ª–∞—Ç—ñ–∂ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.*\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–µ—Ä–µ–∫–∞–∑ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–û–ø–ª–∞—á–µ–Ω–æ' —â–µ —Ä–∞–∑.",
                reply_markup=pay_button
            )

            await query.message.edit_text(f"‚ùå –û–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞! –û—á—ñ–∫—É—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–∏–π –ø–µ—Ä–µ–∫–∞–∑.")
            await query.answer("–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")

    except Exception as e:
        print(f"‚ùå DEBUG: –ü–æ–º–∏–ª–∫–∞ –≤ confirm_ callback - {str(e)}")
        await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –±–æ—Ç–∞.")





async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
